Start: 24/01 21:30

Configuração
- Criar uma aplicação Rails API com postgres
- Configurar rubocop e rspec
- Anotar os requisitos para subir o projeto localmente (versão das libs, etc)
- Subir o projeto localmente

API
- Endpoint recebe os produtos e as quantidades de cada produto E OS VALORES
- Endpoint retorna o valor de cada produto com o imposto, o total de imposto e o total da compra

Banco de dados
- products
  - name
- taxes
  - name
  - rate
- product_taxes
  - product_id
  - tax_id
- receipts
  - total_taxes
  - total
- receipt_products
  - receipt_id
  - product_id
  - amount
  - price
  - tax

Tasks
- Criar migrations com as tabelas
- Criar models + testes
- Criar o ReceiptProducts::CreateService
  - Recebe receipt_id, product_id e amount E PRICE
  - Calcula o tax 
  - Cria e retorna o ReceiptProduct
- Criar Receipts::CreateUseCase
  - Recebe um array de products
  - (Transaction)
  - Cria uma Receipt vazia
  - Para cada product, chama o ReceiptProducts::CreateService
  - Calcula o total_taxes e total do Receipt e faz update
  - Retorna o Receipt
- Criar ReceiptsController com action create
  - Recebe os ids dos produtos e as quantidades E OS PREÇOS
    params = { products: [{ id: 123, amount: 2, price: 55.55 }, {...}] }
  - Chama o Receipts::CreateUseCase que retorna o Receipt
  - Retorna um json de uma Receipt incluindo o ReceiptProducts

Steps
- Verificar versões do Ruby, Rails e Postgres
- bundle e rails db:create
- bundle e rails db:migrate
- bundle e rails db:migrate RAILS_ENV=test
- bundle e rspec